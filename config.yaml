## Basic setup 
#------------------------------------
crds_path: "/path/to/your/crds_cache" 
# Path to the CRDS cache directory. 
# Setting environment variables for the Calibration References Data System (CRDS) 
# is outlined in the jwst pipeline documentation, however each script in this custom 
# pipeline ensures that these necessary CRDS variables are properly assigned.

crds_server_url: "https://jwst-crds.stsci.edu"
# CRDS server URL, should not need to be changed.

pipeline_directory: "."
# Directory containing:
# - config.yaml
# - young_pipeline.sh
# - utils/

data_directory: "/path/to/data/directory" 
# The directory containing your folder with uncalibrated data. 
# The default is the current directory. This should not be the MAST directory
# containing uncalibrated data. That should be a subfolder within this directory.

dir_prefix: "MAST"
# Prefix for all subfolders containing uncal.fits data. If there are any folders 
# containing uncal.fits data without this prefix, they will be excluded.

output_directory: "."
# The directory where the final output files will be saved.

combine_observations: false
# Whether to combine all uncal files into one mosaic (per filter). 
# Note that these observations should be overlapping or, adjacent, but do not need 
# to be of the same target. If false, the pipeline will run on each independent 
# observation based on their IDs and create output directories based on the observation 
# names.

custom_name: "Combined_Observation"
# If combine_observations is set to true, this option defines the resulting combined 
# observation name.

group_by_directory: false 
# Set this option to true if you want to run the pipeline for observations per UNCAL 
# directory. It will override combine_observations, and create mosaic images for each 
# directory containing uncal.fits files. The output directories and files therein will 
# be named according to the original UNCAL directory names (Output_[uncal_directory]).
#------------------------------------

## Stage 1 settings
#------------------------------------
stage1_nproc: 64 
# Number of processes to use for stage 1 of the pipeline. Note that this and all other 
# stages and calibration steps, the number of processes will be reduced if the number 
# of files is less than the user-specified nproc value.

ramp_fit_cores: "1" 
# Currently (as of 24.11.21) it is necessary to get the development version of the 
# stcal repo (> pip install git+https://github.com/spacetelescope/stcal) to use more 
# than a single core. However, we strongly advise against this because there is 
# currently a visual artifact associated with using >1 cores for the ramp_fitting step.

jump_cores: "1" 
# Should be set to 1 if using multiprocessing for stage 1. In general, using 
# multiprocessing for stages and calibration steps rather than individual steps within 
# stages is faster. For jump_cores and ramp_fit_cores, the parameter can be set to a 
# string of an integer value ("1", "16", etc.) or "quarter", "half", or "all".
#------------------------------------

## 1/f noise correction (RATE) settings
#------------------------------------
fnoise_nproc: 64
# Number of processes for 1/f noise correction from _rate.fits files.

## Stage 2 settings 
#------------------------------------
stage2_nproc: 64
# Number of processes to use for stage 2 of the pipeline.

skip_resample: true
# Whether to skip the resampling step in stage 2. This is adviseable for saving time.
#------------------------------------

## Wisp removal settings
#------------------------------------
wisp_directory: "/path/to/wisp-templates"
# Path to the directory containing wisp templates 
# (see https://stsci.box.com/s/1bymvf1lkrqbdn9rnkluzqk30e8o2bne)
# *** USE VERSION 3 TEMPLATES ***

wisp_nproc: 64
# Number of processes to use for the wisp removal step. 

plot_sky: false
# Whether to plot the sky background for each exposure. By default, wisp template fitting
# plots will be produced regardless of this setting.
#------------------------------------

## 1/f noise correction (CAL) settings
#------------------------------------
cfnoise_nproc: 64
# Number of processes for 1/f noise correction from _cal.fits files. 

# The "cfnoise" 1/f noise removal method is a gradient based, full exposure 1/f mitigation
# method. In blank fields, it may not perform as well as the 1/f noise correction algorithm
# used on _rate.fits files. However, it performs better in the presence of extended light
# features such as ICL or diffuse gas. The remstriping implementation can lead to
# oversubtraction in the presence of extended light, so it is recommended to skip the
# fnoise_correction step and use the cfnoise method instead if extended light is present.
#------------------------------------

## Background subtraction settings
#------------------------------------
bkg_nproc: 64
# Number of processes to use for the background subtraction step.
#------------------------------------

## Stage 3 settings ##
#------------------------------------
stage3_use_multiprocessing: true 
# If true, this will run stage 3 processing with one filter per process AFTER the first 
# (longest) wavelength filter is complete. The longest filter mosaic is completed first to 
# provide the necessary WCS information for other filters to be aligned to it. ONLY use 
# multiprocessing if you are certain your system has enough memory to support it. 

# Running a typical 8-filter observation (320 uncal files, 64 uncal per SW filter and 16 
# per LW filter, ~34Gb cal files) with 7 filters after the initial filter run:

# - LW filters begin resampling first while short wavelength filters are undergoing outlier 
# detection -> ~100Gb memory.
# - Soon after LW filters finish resampling, the resampling for the short wavelength filters 
# begins. This happens because there are more files for the short wavelength module per 
# exposure. During this SW filter resampling, ~120Gb of memory was used.

min_processes: 8
# The minimum number of parallel processes for stage 3 multiprocessing. If the number of 
# filters is less than this value, the number of processes will default to the number of
# filters. If you want to use multiprocessing AND resampling in-memory but do not have 
# sufficient computational resources, you can decrease min_processes to a small value.

outlier_in_memory: true
# Whether to perform outlier detection in memory. Use if you are confident your system has
# enough available memory. Using memory significantly speeds up the process.


# Resample settings
# ~~~~~~~~~~~~~~~~~~
pixel_scale: 0.02
pixfrac: 0.75
rotation: 0.0 # 0.0 = North up, East left
res_kernel: "square"
resample_in_memory: true
# Whether to perform resampling in memory. Significantly speeds up resampling if set to true,
# but requires a large amount of memory.

# For very large observations (e.g., the COSMOS-Web field), using stage3_multiprocessing, 
# outlier_in_memory, and resample_in_memory becomes heavily dependent on your system. 
# ~~~~~~~~~~~~~~~~~~

# Tweakreg settings
# ~~~~~~~~~~~~~~~~~~
external_reference: "" 
# This catalog should be a CSV file with two columns, RA and DEC. This option can also be set
# to values from the jwst pipeline documentation, such as "GAIADR3".

starfinder: "segmentation" 
snr_threshold: 5.0
abs_fitgeometry: "rshift"
fitgeometry: "rshift"
# These tweakreg settings may need to be modified by the user for best results. For cluster 
# fields, these settings seem to work well IF the observation was performed on a single day. 
# For multiple-day visits, the user should try using "general" fit geometry first. If there
# are issues, then revert to rshift. For more information on tweakreg settings, refer 
# to the jwst calibration pipeline documentation.
# ~~~~~~~~~~~~~~~~~~


# Skymatch settings
# ~~~~~~~~~~~~~~~~~~
skymethod: "match"
# ~~~~~~~~~~~~~~~~~~
#------------------------------------

# Extract images
#------------------------------------
# Indicate whether to extract the various extensions from the i2d files. This is helpful if 
# moving files is necessary, since i2d files have many extensions and can be very large.
extract_sci: true # image data
extract_err: true 
extract_con: false
extract_wht: true
extract_var_poisson: false
extract_var_rnoise: false
extract_var_flat: false
#------------------------------------

## Steps to skip ##
#------------------------------------
# Uncomment skip_steps and steps to skip below if necessary.
# ***IMPORTANT: You should skip one of either fnoise_correction or cal_fnoise_reduction, since they
# perform 1/f noise mitigation on different files. using both may result in oversubtraction.
# See details above regarding the cal_fnoise_reduction (under cfnoise_nproc option) for information
# about the two methods. By default, fnoise_correction is skipped since it can oversubtract faint
# ICL signal in cluster fields. 

# Certain steps cannot be skipped given a specific scenario. For example, if you have run the pipeline
# and it has completed, you cannot skip the steps up to background subtraction. That is because the
# original files have been moved and have already been processed.
skip_steps:
  # - download_uncal_references
  # - stage1
  - fnoise_correction
  # - download_rate_references
  # - stage2
  # - wisp_subtraction
  # - cal_fnoise_reduction
  # - background_subtraction
  # - download_cal_references
  # - stage3
#------------------------------------
